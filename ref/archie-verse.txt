Verse-chorus-verse. Aka Into the Archie-Verse.
~~~
An Archimedes demo framework.
Contains all accumulated libraries and code from previous prods.


Fantasy Cracktro Compo (became AllStar Megademo Donut...)
~~~
Target 16th March ~five weeks!
Use RasterMan => music bug? (See Steve's email)
Get a chip tune => get something running first
Sine scroller => started
Add rasters => started
    - Raster bars?
Some ASCII text effect
Something in the background?
    - Starfield?
    - 3D starfield?
    - Particle system of some sort?
    - Line effect of some sort?
Logo! => Ask on the Atari forum if Jade will make one?


Scroller
- MODE 9 for raster colours.
- 1 byte columns = 2 pixel scroll, not per pixel
- 16x16 font = 1 byte x 16 rows x 8 x cols

ldmia r11!, {r0-r3}     ; 16 bytes
strb r0, [r12], #160
mov r0, r0, lsr #8
strb r0, [r12], #160
...
; repeat x16

Rasters
Classic hue table
R > Y > G > C > B > M > R
0x00f > 0x0ff > 0x0f0 > 0xff0 > 0xf00 > 0xf0f > 0x00f

ASCII text
- 8x8 font plotting say 20x16 ish to the screen for messages.
- Text types out one character at a time.
- Start by plotting in fixed location
- Add movement
     - Per character? => SLOW as has to be masked (4x RAM access)
     - Or somehow per pixel?

What do we want the effect to be?
If not separate characters could blit to a texture buffer.
Then how to get the texture to the screen.
Moving as a single fixed block isn't interesting.
    - Trivial on Amiga as this will be on a separate bitplane.
Ideally would want it mapped to a nice 'flag'
    - Alternatively make text out of particles cf. Push
    - Some sort of 5x7 font made out of independent dots.
    - Max 35 points, but average say 16 points?
    - Push uses 500 particles per frame = ~30 letters.
    - Hmm, not really enough. TextBox current 24x12=288 chars.

Or do something more like Hoffman's Cracktro text effect?
So use the whole high-res screen (80 column) but fixed.
That'd be in MODE 12? => Double pixels for the scroller (twice the cost...)
Would need to plot these to a third buffer and blit it instead of CLS.
Don't want to be plotting 80x32 chars individually each frame.
=> Ask ne7 for some ASCII screens!
Maybe have enough time to blit some sprites on top (vector balls ish?)
==> ALL TOO SLOW :(

Regroup
~~~
Trying to ape bitplanes on Archie is a path to madness!!!
E.g. just having a screen of static text behind everything else is
trivial on Amiga (1 independent bit plane) but painful on Archie as
everything has to be masked.

Really need to focus on what Archie is good at - not bitplanes!!

If using RasterMan then let's explore this more.
Not tried the MEMC writes to change screen address per line.
=> Wibbling logo 'for free' by selecting from preshifting 16 copies (one byte each)
=> Wibbling reflection plane at bottom of the screen by selecting from main screen

MEMC writes - can't set VInit other than on new frame.
But can set VStart and VEnd!
When Vptr > VEnd then wraps to VStart.
Vptr+=1 => 16 bytes.
All addresses are physical RAM.
Thankfully VStart typically = 0x0000
VEnd = 0x13ff = 2 * 0xA00 - 1 = 2x 40K screens - 16 bytes

==> Separate ponder. I wonder if it's possible to VRup the VIDC?
A: No! VSync always happens when Vcounter resets to 0.
   (But you can reset a load of registers midframe anyway.)
    https://stardot.org.uk/forums/viewtopic.php?p=425369 

How about a large lit torus clipped with a header logo and a scroller text below?
=> YES! :)

Cross product.
| i  j  k  |
| x0 y0 z0 |
| x1 y1 z1 |

i (y0*z1) - (z0*y1)
-j (x0*z1) - (z0*x1)
k (x0*y1) - (y0*x1)

Then have to get the length of this and normalise. Urgh.

Ring starts rhs X+ve Y=0 goes down
Circle starts outer edge Z=0 X+ve Y+ve goes inside

(outside edge) 0 1 (bottom edge) 2 3 (inside edge) 4 5 (top edge) 6 7 (outside edge)
So draw order would be: 3 4 2 5 1 6 0 7
Could rotate these 180 degrees: 0 7 1 6 2 5 3 4
0 N-1
i DIV 2 (N-1)-(i DIV 2)

- Coordinates are upside down? (Y inverted?) - FIXED
    => Check transformed verts on frame 0.
       Looks like Y is upside down? YES. FFS.
    => Move to Sarah's matrix transform for verts. - DONE

- Face normals pointing the wrong way?! - FIXED
    => Check winding order! - DONE

- Performance
    => largest torus at 50Hz at 8MHz? ==> NOT MUCH!
    => cheaper scroller?
    => all micro-optimisations in loop - DONE
- Sorting
    => create front and back facing presorted face list
    => pick face list based on direction torus is pointing

Sarah's vertex transform code.
~~~
Precision is possibly s7.12

; R14=count (down)
transform_loop:
        LDMIA r12!, {r9, r10} ;x, y
        ORR r12, r14, r12, LSL #11  ; count | src_ptr << 11 (free up r14)

        ;r0-r8 - matrix
        ;r9, r10 - x, y
        ;r11 - temp
        ;r12 - source ptr
        ;r14 - temp

        MUL r11, r9, r6   ;z=x*m20 + y*m21
        MLA r11, r10, r7, r11

        MUL r14, r10, r1  ;x = y*m01

        MUL r10, r4, r10     ;y = y*m11
        MLA r10, r3, r9, r10 ;y = x*m00 + y*m11

        MLA r9, r0, r9, r14 ;x = x*m00 + y*m01

        MOV r14, r12, LSR #11   ; extract src_ptr
        LDR r14, [r14]  ;z
        ADD r12, r12, #4<<11    ; increment embeded src_ptr

        MLA r9, r2, r14, r9   ;x = x*m00 + y*m01 + z*m02
        MLA r10, r5, r14, r10 ;y = x*m01 + y*m11 + z*m12
        MLA r11, r8, r14, r11 ;z = x*m02 + y*m21 + z*m22        

        MOV r14, r12, LSL #(32-11)
        MOV r14, r14, LSR #(32-11)  ; extract count
        MOV r12, r12, LSR #11       ; extract src_ptr

        MOV r9, r9, ASR #12         ; s7.12 after MUL
        MOV r10, r10, ASR #12
        MOV r11, r11, ASR #12
        STMDB sp!, {r9, r10, r11}   ; push on stack

        SUBS r14, r14, #1
        BNE transform_loop

Perf more broadly?
~~~
Triangle strip approach?
Read a list of verts interleaved with colour word to plot?
=> 2D or 3D? 2D verts ultimately have to be sorted top-to-bottom
Will the cost of writing this out be higher than doing it inline?
Perhaps reduces register pressure?
Worth testing but in harness...

Or! Think about a display list approach?
As we're using a presorted mesh the face order is consistent.
So after projection the quad loop is always the same.
Modulo the visibility check.

Compile the mesh into something that is 'executable'.
Could have a list of bytecodes commands that are interpretable
E.g. Draw triangle, draw strip, set colour etc.

Or just compile this to actual executable code?
What does the plot loop boil down to?

; R2=ptr to projected vertex array (x,y) in screen coords
; R10=ptr to visibility array
; R11=ptr to face colour array

; Read the visibility check.
ldrb r1, [r10, #face_no]     ; read visibility check
cmp r1, #0
beq .1

; Read the three verts for a triangle.
ldr r3, [r2, #t0_v1o + 0]    ; v1x = triangle 0, vertex 1 index offset
ldr r4, [r2, #t0_v1o + 4]    ; v1y = triangle 0, vertex 1 index offset

ldr r5, [r2, #t0_v2o + 0]    ; v2x = triangle 0, vertex 2 index offset
ldr r6, [r2, #t0_v2o + 4]    ; v2y = triangle 0, vertex 2 index offset

ldr r7, [r2, #t0_v3o + 0]    ; v3x = triangle 0, vertex 3 index offset
ldr r8, [r2, #t0_v3o + 4]    ; v3y = triangle 0, vertex 3 index offset
; ^-- the above could be optimised where vertices are Consecutive

add r9, r2, #tN_vMo
ldmia r9!, {r3-r4, r5-r6}    ; if consecutive etc.

ldr r9, [r11, #face_no]     ; read colour word
bl triangle_plot_ex

; Triangle plot routine trashes all registers!
; So need to reload the base ptr.
; Could structure the data so there's just one base ptr.
; As long as the number of faces is fixed (or just set max)

ldr r2, runtime_base_ptr
; Eg. visibility array [MAX_FACE bytes]
;     face colour array [MAX_FACE words]
;     projected vertex array [MAX_VERTS*2 words]

.1:

Ideally would generate this code at runtime.
But harder to fully optimise.
Would need to patch up branches, but not too bad.
Is reading two consecutive words faster with ldm?
3c + 1.25c per reg = 3 + 2*1.25 = 3 + 2.5 = 5.5c + add at 1c = 6.5c
Instead of 2x4c = 8c so yes!

What does this save us?
Per visible face:

    stmfd sp!, {r9-r12}         ; 8c
    orr r4, r4, r4, lsl #4      ; 1c
    orr r4, r4, r4, lsl #8      ; 1c
    orr r4, r4, r4, lsl #16     ; 1c
    mov r1, r3                  ; 1c
    and r0, r1, #0x0ff          ; 1c
    mov r0, r1, lsr #8          ; 1c
    and r0, r0, #0x0ff          ; 1c
    mov r0, r1, lsr #16         ; 1c
    and r0, r0, #0x0ff          ; 1c
    stmfd sp!, {r1, r2}         ; 5.5c
    mov r0, r1, lsr #24         ; 1c
    and r0, r1, #0x0ff          ; 1c
    ldmfd sp!, {r9-r12}         ; 5.5c

Total = 11c + 11c + 8c = 30c per face. :S
Large torus = 64 faces = 32 faces visible = 960c.
Not a lot! < 2 scanlines.

Could save some of this anyway by blowing out the mesh arrays?
Face colour => colour word.
Quad face indices => store as words.

Megademo TODO
~~~
PREP
- One makefile produces two exes - DONE
- Each exe has a different set of assets and music. - DONE
- Each exe has a separate sequence script. - DONE
- All other code is shared. - DONE
    - In theory only need to swap the app.asm file!!

DONUT PART
~~~
- Add logo. - BODGED
- Add scroller. - DONE
    - Scroller at 50Hz how?
        - Update on vsync - STARTED
        - Use RasterMan to display a separate buffer?
        - Fixed single buffer that's updated at vsync.
        => Would need to move the framework to all MEMC for buffer management. - DONE
        => Set Vinit per frame (Vptr gets loaded with Vinit at vsync)
        => When Vptr>Vend then Vptr=VStart

To move to direct buffers.
Turn off RasterMan for now to avoid complications.
Obtain logical & physical RAM addresses for N banks at init. - DONE
Use bank numbers to obtain relevant addresses. - DONE
Set Vinit instead of calling OSByte_WriteDisplayBank. - DONE

- Come up with at least four interesting variations.
    - Move
        - Defining paths with individual math_vars is tedious.
          Now need to define a math_vec_func !? - DONE
          Could also have a 'move to target' tick? - STARTED
          Bounce up and down in Y?
    - Morph - OOT
    - Animate - OOT
        => Need to be careful with sorting order
           (Or implement face sorting.)
           E.g. twisting the verts will invalidate the static draw order.
        - Copy mesh header for animated version of the mesh.
        - Create a new vert array and update ptr in header.
        - Animated verts into a new verts array from base vert array.
        - Update mesh ptr in the entity being displayed...
    - Lighting
        - Move the light source - DONE
        - Multiple light sources? => NOT ENOUGH COLOURS (TOO MANY FACES)
        - Draw the light source
    - Triangle wibble by offseting X start by Y index into table.. - DONE
        - Sine wave and random.
        - Think this needs a bit more exploration and would be better as part of a larger 3D demo.
    - Looks nicer without flat inner face but need 2x face draw order lists. - DONE
        Standard: R8=0,7,1,6,2,5,3,4
        Flipped presumably: 7,0,6,1,5,2,4,3
- Colours - OOT
    - Some nicer palettes.
    - Some palette blends.
    - What about dithering?
    - Any sync?
- RasterMan for logo and scroller?
    => Need vsync callback to run != 50Hz - DONE
For the 50Hz scroller, if you're worried about overrunning the available time,
you could store entry R14_IRQ locally (not using IRQ stack) switch over to SVC mode
and then re-enable IRQs. I think that will be ok with RM and would allow your
scroller code to continue to execute as screen redraw and RM IRQs begin.
You just need to ensure you complete before redraw gets to the scroller...
although, at the extreme, you could test/set a re-entrancy semaphore flag when
your scroller code is called and immediately exit if already running. That would
allow you to take as long as you like, dropping to 25Hz if you don't complete in time.

Donut TODO
~~~
- MEMC writes to fix logo + buffered donut + single buffer scroller - DONE
    - Screen buffers every 40K = 0x0000, 0xa000, 0x14000 (bytes)
        - Vend = 0x77f0, 0x117f0, 0x1b7f0
    - Screen buffers are 192 lines long = 0x7800 (bytes)
    - Logo at screen buffer 1, line 192 = 0x7800 (Vend=0x9af0)
    - Scroller at screen buffer 1, line 248 = 0x9b00
- Optimise scroller to unrolled pixel shift code and one column write - DONE
- Make four palettes for donut + blend in sequence - DONE
- Use of RasterMan on the donut - alt shade the faces?
    Mental Hangover - rasters cycle through the hue table every 16 scanlines
    Each colour is a darker version of the hue table
    Would need to set 16 colours per scanline... = 8% of CPU!
- Some sort of donut animation - NOPES
- Some sort of donut movement - NOPES
- Moving the light source requires a SQRT.
- Add Hammerfist's donut font. - DONE
- Better ramps for the colour palettes... - HAMMERFIST?
- Update scrolltext to include credits, greets and Hammerfists's stuff.

1) start the scene with the logo, donut and scroller in the orange/browns, then 
2) switch donut and/or scroller to the greys from the logo (or a 16c gradient that matches it)  and finally
3) pick any gradient for the donut, like this magnificent purple selection, but also recolor the logo and scroller to match. 
(We should definitely check if the purples and whatever you come up with look good enough, but technically they should work…)
Also, while the little background gradient for the scroller is an idea I am 100% ok with, it should also match the rest. I.e., in the screenshot oranges and   blues under greys and purples is too much.
You could always go for safe and just use greys for that gradient behind the scroller, matching with the greys from the logo.
Oh btw, for point 3), I meant changes the oranges in the logo to purples, but leave the greys grey. That sort of anchors it, makes it at least a little bit more subtle 🙂

=> Perhaps just mix it up, so have the effectors layered at different rates. - OOT
   - Move sequence happens every M patterns
   - Animate sequence happens every A patterns
   - Palette changes happen every P patterns
   - Wibble happens every W patterns etc.
   - 20 patterns total.


UV PART
~~~
- Move from proto-arc repo into archie-verse. - DONE
- Add 8 initial tables.
- Add 8 initial textures.
- Add 8 initial colour palettes.
    => Paul to the rescue!
- Make a simple sequence that just cycles through them. - DONE
- Make a sequence with energy and sync:
    - Something a bit more acid like?
    - Fast switch to the beat.
        => Note that unrolled code is large and generating tables is slow.
    - Change direction quickly to the beat.
    - Animated texture to the beat.
- Add music. - DONE
- Move to new features
    - Skip pixels - DONE
    - Animated textures?
    - Colour cycling?
    - Scroller? - DONE
    - Additional FX e.g. plasma? <= No time!
    - Transitions
        - Smoothly appear one/two lines at a time.
        - Palette fade. - DONE
        - Wipe the texture instead of the screen.
        ==> Create jump table with call points per line plotted.
    - Generate tables at runtime?
        (Requires sqrt, atan2, sin, cos functions)
- Polish!

Riffing with Paul on LUTs.
~~~
screen[i++] = texture[0x23f5]
screen[i++] = shade_table[texture[0x23f5] + shade_const]
screen[i++] = texture[0x23f5] >> (tint_bit)
screen[i++] = texture[0x23f5] | (tint_bit)
screen[i++] = texture[0x23f5] & ~(tint_bit)

Store different version of the texture in the top nibble.
Masking code is altered to mask and shift the correct nibbles.

Scheme 1:
#define MAT_GRID 1
#define MAT_REFLECT 2
#define MAT_REFRACT 4
#define MAT_STREAKS 8
#define MAT_SHADOW 128

Scheme 2:
logical_colour = texture[uv]
logical_colour = (logical_colour >> a) + b

=> Need a cheap fade for the tunnel / distance modifier
    - Use Paul's shift and add approach?
        - Can try this in Python easily enough to see what it looks like..
    - Bake 2x2 dithering into the plot routine.
        - Hard mask the pixels (not) to be plotted.
            bic rDest, rDest, #0xf0f0f0f0 etc.
    - Use two textures interleaved for a darkened version
    - Use four separate textures - replace the four pointers
        with tracked add/sub instructions.
    ==> Paul might make the tunnel FX anyway...

RAM budget
- Assume 9 parts?
- Each has UV table = 60K max
- Each has unique texture = 16K
- Max = 9*60 = 540K + 9*16 = 144K = 684K
- Plus unrolled code = 328K
- Plus sinetable = 64K (could be shrunk or just use smaller 32K table?)
- Plus runtime texture space = 32K (2x16K for wrap in V)
- Plus ZP/loader = 64K
- Plus MOD :) = current 196K but let's see if we can get that up!
- Plus code + stack = 32K max (probably 16K)
- 1400K available total (can be stretched for onetime execution)

- Plus modules in memory (QTM + RAM)
- Plus screen buffers
- Plus RISCOS overhead :S

Runtime RAM savings:
- Double up texture being used when switching to it (requires double copy to scratch)
    - 9*16K + 32K scratch = saves 112K
- Compress UV tables somehow?


TODO:
- Add Hz debug counter. - DONE
- Add Paul's new UV tables and textures. - DONE
- Separate the two parts. - DONE
- Sort out RAM. - DONE
- Add configurable texture size at runtime. - DONE
    - Pass through UV's in conversion, don't munge them. - DONE
    - Set texture dims in script - DONE
    - Update code gen to accomodate texture dim calc. - DONE
- Sort out time in script as ARM2 runs much slower than ARM250!! :|
- Fix index textures to properly pass through... (DiskIndex bug) - DONE
- Export new U,V,S format from old UV table Python script. - DONE
- Test decompressing LZ4 UV tables at runtime. - DONE saves 300K!

- Compress UV tables to reduce RAM overhead? - DONE
    - Doing U,V deltas increases the compressability.
    - LZ4 works surprisingly well.
    - Would have to see if the overall saving was enough to decomp into a scratch buffer..
        E.g. paul[1-5] comes to ~140 with LZ4 or 260K w/out so would save 60K even with 60K buffer.
        Depends on how we're transitioning between scenes?
    - Could do a RLE type scheme, but might be better to use a generic compressor
     (otherwise the decompress and codegen gets complicated)

- Palette pulse for Reactor panic. - DONE

int Offset = some anim (sawtooth or sine wave ) ranged 0-8 or -4 to 8 or something.
for(PaletteIndex = 0; PaletteIndex < 16; PaletteIndex++)
{
   int LookupIndex = clamp( PaletteIndex + Offset, 0, 15);
   SetPalette(PaletteIndex, Palette[LookupIndex]);
}

Paul's TODOs:
~~~
- Fixed point scroll for UVs
    Ship over planet sequence could get subtly faster as it plays. The reactors probably look better faster generally but reactor panic could also speed up as it plays.
    Monolith could slowly change the speed as a sine wave between two similar values to suggest gusts of wind.
    Sun flare probably looks better quite slow.
- Wonder if a palette animation from black to white then to the image would look like a camera flash / shutter effect. Could that coincide with a shutter sound?
- Also thinking... perhaps the very first shot could start completely static so it looks like a still image and then slowly speed up from zero the scroll effect as a "tada" moment.
- Double height LUT table.. => NEXT TIME?
    => Check max code size.
    => Put gen code at end of bss.
- Long textures - DONE
    Code size for Apollo = 149K
    Code size for Relax = 183K
- Palette revert glitch for one frame on boot only - DONE
    => Setting palette to black shows a one frame of black
    => Presumably as not going through OS palette calls?
    => Some weird RISCOS delay after MODE change thing?
    => Issue a wait before we start the demo? FFS!
- Palette jump after long setup => reset vsync_delta before math_var tick.


For Megademo:
~~~
- Load and run at 0x10000 - DONE
    - Change .org
    - Update link_script.txt
- Build creates both binaries? - DONE
- Minimal binary for each part. - IN PROGRESS
- Compress binaries. => Sarah to choose method.

Scene Order
~~~
Apollo (Planet rise, Demo name +Logos [ Bitshifters?, Nova? ],
Ship flying over surface,
Ship fling away from planet,
Warp travel,
Black hole,
New : Entering wormhole?,
Tunnel (wormhole tunnel),
Distorty UV,
New: More trippy effects,
Rotozoomer,
Spin,
Reactor Panic,
Spin to a stop,
Reactor Happy,
New: Space Travel II - More space travel (reusue warp again or something new),
Monolith,
Sun,
New : End somehow?,

New: Somewhere in the above - greets / credits scrolling / flying past ship? Perpahs cut in the middle of Space Travel II (or the trippy section but that feels a bit early)


Tech retrospective of archie-verse framework.
~~~

- Wasn't too bad hosting two demo parts from the same codebase (i.e. got shipped).
  But.. ended up with 17 instances of .if _DEMO_PART == <PART> conditionals outside of bss/data/sequence.
  The code in app.asm got particularly tangled, should have been two app_part.asm files with a better API.

- Moving to MEMC control for screen banks is quite powerful but requires care and
  ended up hardcoding the screen bank RAM allocation and page size, which is not great!

- Math func variables continued to be quite powerful for single values, and can be usefully
  bodged for structures (RGB, palettes) but a poor fit for 2D and 3D curves.

- Scripting by poking RAM values and calling functions is quite flexible to get started, but
  this resulted in around 9 lines of boilerplate script per scene, which could easily have
  become a table. Although it did allow very fast last minute script tweaking.

- Lack of scoping for variables in the scripting system is a PITA, having to manually destroy objects.

- No hot reload of the sequence script...

- Kinda just want the script to be arbitary C code... do we want the outer loop to be C,
  with the inner (hot path) functions in asm, or keep the existing asm framework and use C
  for the scripting only?
  (Ideally want to be able to fully prototype in C but is that a separate thing?)

- Now have three different ways of specifying a palette and have to convert between them!
        OS_Word           : 0x00BbGgRr
        VIDC reg          : index << 26 | 0xBGR
        Gradient Blaster  : 0x0RGB
  Ended up going GB -> OS_Word format. LERP in OS_Word space. At vsync convert OS_Word -> VIDC.
  Which format is preferable? 

- Screen clear code is hard tied to polygon clipping code, which is super ick!

- Doing vertical rupture with RasterMan wasn't very difficult. Lots of potential here!

- Debug vars worked well, although could do with some more helpers.

- The continued difficulty of setting up background tasks meant many frames were Lots
  when decompressing assets and generating code...

- Scripting system still has a mix of frames and vsyncs. Again, should this be standardised on seconds?
