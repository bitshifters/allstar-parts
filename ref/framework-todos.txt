Verse-chorus-verse. Aka Into the Archie-Verse.
~~~
An Archimedes demo framework.
Contains all accumulated libraries and code from previous prods.

Framework TODOs as of 18/6/25 (post-NOVA):
~~~
- Separate tick/draw order from being tied together. <=== THIS
    - Strict draw order in layers.
    - Are there any dependencies between tick?
      => Could be if moving objects in a scene then doing collisions, say.
    - Tick just means 'call this function every frame without fail'
      Could be implemented using script_fork!!
- Improve build using Tom's Python scripts and makefile-foo.
- Move png2arc to Python 3. ==> Use Gemini!
- MOD file analyser to configure code / script.
- Move scripting to use seconds throughout?
- Automatic clearing of BSS by loader?
- Sort out palette nonsense - some things are in expanded 0x00BbGgRr format,
    some are in 0x0RGB format, what about VIDC command format?


DONE
~~~
=> Add logo on screen and submit as blank framework. - DONE
- Separate tick/draw order from being tied together. <=== THIS
    - Strict draw order in layers.
    - Are there any dependencies between tick?
      => Could be if moving objects in a scene then doing collisions, say.
    - Tick just means 'call this function every frame without fail'
      Could be implemented using script_fork!!
- Does ErrorV actually do anything? => Handles OS_GenerateError calls.
- Create text-pool module from code in fx/bits.asm. - DONE
  => (but could still maybe do with some refactoring)
- Remove OS_Byte VDU calls - just manage screen buffer data internally.
  No point in keeping these if poking VIDC directly for palette as not compatible.
  Keep a list of screen buffer addresses and set MEMC on vsync etc. - DONE
- Dynamically generate CLS code include clear line code.
    => Shrinkler does a better job of compressing this unrolled code than generating it...!!!
- How have I got this far without memcpy and memclr?!
  => Write optimised versions of these for lib. - DONE SIMPLE VERSION
- Standardise code generation at init. - DONE
    - Have R12=start of free RAM and expect to return top in R12 for next fn.


Pre-Revision thought
---
I wanna make another acid demo!!
ProTracker embedded command stream?
VST plugin architecture doesn't look feasible to do this (designed for instruments and effects)
Don't really want to hack the OpenMPT code to extend it or tie it to Rocket.
Use the old school option and add extra MOD channels that are stripped at build time.
ProTracker command 8 is unused... so shouldn't affect playback?
Command gives us one byte of payload.
For NOVA invite we had up to 4 commands per row, with one nibble for the control code and one byte of data
Details: https://docs.google.com/spreadsheets/d/1nPhbag9fAhDcQTmo_VQmBMRLQR4kX4u2HnAkiunwvUI/edit?gid=626746898#gid=626746898
Arkos supports 4 commands per row per channel anyway.
We'd probably have to have 4 extra channels.
Just make these silent? And start using the note altering commands 1xx - 8xx


NOTES TO SELF:
~~~
MODE 13 default palette: (RGB222+tint)
 [0]=0000 [1]=0111 [2]=0222 [3]=0333 [4]=0004 [5]=0115 [6]=0226 [7]=0337
 [8]=0400 [9]=0511 [a]=0622 [b]=0733 [c]=0404 [d]=0515 [e]=0626 [f]=0737

RTW RGB233 palette:
 [0]=0000 [1]=0200 [2]=0020 [3]=0220 [4]=0006 [5]=0206 [6]=0026 [7]=0226
 [8]=0400 [9]=0600 [a]=0420 [b]=0620 [c]=0406 [d]=0606 [e]=0426 [f]=0626

RTW RGB332 palette:
 [0]=0000 [1]=0002 [2]=0020 [3]=0022 [4]=0004 [5]=0006 [6]=0024 [7]=0026
 [8]=0600 [9]=0602 [a]=0620 [b]=0622 [c]=0604 [d]=0606 [e]=0624 [f]=0626

RTW sintab:

makesintab:
    adr table90,sin
    add table90,table90,#1024*4
    add table270,table90,#2048*4
    mov s,#0
    mov c,#1<<19
    mov rounding,#1<<21
    mov sd,#&1900
    orr sd,sd,#&22
    mov index,#1024
loop:
    add temp,s,#1<<6
    mov temp,temp,lsr #7
    str temp,[table90,-index,lsl #2]
    str temp,[table90,index,lsl #2]
    rsb temp,temp,#0
    str temp,[table270,-index,lsl #2]
    str temp,[table270,index,lsl #2]
    mla temp,s,sd,rounding
    sub c,c,temp,lsr #22
    mla temp,c,sd,rounding
    add s,s,temp,lsr #22
    subs index,index,#1
    bpl loop
    movs pc,r14
sin:
