Verse-chorus-verse. Aka Into the Archie-Verse.
~~~
An Archimedes demo framework.
Contains all accumulated libraries and code from previous prods.

NEXT STEPS
~~~
- Submit a clean-ish branch to a separate repo for the Megademo source.
- Tidy up app.asm with three parts to verify APIs?
- Sort out palette nonsense whilst it's fresh?
- Strip back to a single effect and merge back into main.
- ProTracker processor Python script.
    https://www.stef.be/bassoontracker/docs/ProtrackerCommandReference.pdf
    https://www.aes.id.au/modformat.html
- Build something simple in ArchieSDK to assess prototyping/scripting potential.



Framework TODOs as of 18/6/25 (post-NOVA):
~~~
- Separate tick/draw order from being tied together. <=== THIS
    - Strict draw order in layers.
    - Are there any dependencies between tick?
      => Could be if moving objects in a scene then doing collisions, say.
    - Tick just means 'call this function every frame without fail'
      Could be implemented using script_fork!! (Don't do this!)
- Improve build using Tom's Python scripts and makefile-foo.
- Move png2arc to Python 3. ==> Use Gemini!
- Spit out palettes as asm data from png2arc script, not just binary blobs.
- MOD file analyser to configure code / script.
- Move scripting to use seconds throughout? (Still using mix of frames and vsyncs.)
    => See below.
- Automatic clearing of BSS by loader?

- Sort out palette nonsense - three different formats in use...
    OS_Word           : 0x00BbGgRr
    VIDC reg          : index << 26 | 0xBGR
    Gradient Blaster  : 0x0RGB <= use a macro to twizzle these into VIDC format?

- Disentangle app.asm, which got very messy:
    - Better API/seperate module for handling audio.
    - Better API/separate module for handling video.
    - Vsync code needs a complete rethink.

- Deprecate unused configs to simplify code:
    - AppConfig_LoadModFromFile - always going to bake this in?
    - AppConfig_DynamicSampleSpeed - put this in an audio module?
    - AppConfig_UseArchieKlang - put this in an audio modue?

- Sort out messiest configs (cross multiple files):
    - AppConfig_InstallIrqHandler - touches main, incompatible with RM.
    - AppConfig_UseRasterMan - touches main, incompatible with IRQ handler.
    - AppConfig_UseMemcBanks - touches main, keep for compatibility testing!

- Remove Megademo hacks:
    - Determine screen RAM allocation and page size runtime if needed.
    - Sort out CLS vs polygon clipping code.

- Do we still care about AppConfig_UseSyncTracks?
    Replace with MOD event system and C code?


---
Fix frames / vsyncs / seconds once and for all:
---
- vsyncs (every 50Hz)
- frames (once around the main loop = frames displayed to user)
- seconds (walltime = vsyncs / 50)

vsync_count used for:
- test for frame drops (when 50Hz) - DEBUG
- calculating frame rate - DEBUG
- LuaPod and RocketPod time communication with host

vsync_delta used for:
- script wait vsyncs - so that transitions match music
- passed in as R1 to FX tick fns (but not used?)

frame_counter used for:
- overall length of the demo 'max_frames'
- sync tracks (LuaPod) - UNUSED
- passed in as R0 to FX tick fns (but not used?)
- fast forward to frame when skipping music patterns - DEBUG
    => THIS SEEMS WRONG!

desirata:
- sequence scripting specified in seconds (which matches the MOD / wall clock)
- math_vars should be updated per vsync - DONE
- scripts are ticked once per frame - AS IMPLEMENTED


DONE
~~~
=> Add logo on screen and submit as blank framework. - DONE
- Does ErrorV actually do anything? => Handles OS_GenerateError calls.
- Create text-pool module from code in fx/bits.asm. - DONE
  => (but could still maybe do with some refactoring)
- Remove OS_Byte VDU calls - just manage screen buffer data internally.
  No point in keeping these if poking VIDC directly for palette as not compatible.
  Keep a list of screen buffer addresses and set MEMC on vsync etc. - DONE
- Dynamically generate CLS code include clear line code.
    => Shrinkler does a better job of compressing this unrolled code than generating it...!!!
- How have I got this far without memcpy and memclr?!
  => Write optimised versions of these for lib. - DONE SIMPLE VERSION
- Standardise code generation at init. - DONE
    - Have R12=start of free RAM and expect to return top in R12 for next fn.


Pre-Revision thought
---
I wanna make another acid demo!!
ProTracker embedded command stream?
VST plugin architecture doesn't look feasible to do this (designed for instruments and effects)
Don't really want to hack the OpenMPT code to extend it or tie it to Rocket.
Use the old school option and add extra MOD channels that are stripped at build time.
ProTracker command 8 is unused... so shouldn't affect playback?
Command gives us one byte of payload.
For NOVA invite we had up to 4 commands per row, with one nibble for the control code and one byte of data
Details: https://docs.google.com/spreadsheets/d/1nPhbag9fAhDcQTmo_VQmBMRLQR4kX4u2HnAkiunwvUI/edit?gid=626746898#gid=626746898
Arkos supports 4 commands per row per channel anyway.
We'd probably have to have 4 extra channels.
Just make these silent? And start using the note altering commands 1xx - 8xx


NOTES TO SELF:
~~~
MODE 13 default palette: (RGB222+tint)
 [0]=0000 [1]=0111 [2]=0222 [3]=0333 [4]=0004 [5]=0115 [6]=0226 [7]=0337
 [8]=0400 [9]=0511 [a]=0622 [b]=0733 [c]=0404 [d]=0515 [e]=0626 [f]=0737

RTW RGB233 palette:
 [0]=0000 [1]=0200 [2]=0020 [3]=0220 [4]=0006 [5]=0206 [6]=0026 [7]=0226
 [8]=0400 [9]=0600 [a]=0420 [b]=0620 [c]=0406 [d]=0606 [e]=0426 [f]=0626

RTW RGB332 palette:
 [0]=0000 [1]=0002 [2]=0020 [3]=0022 [4]=0004 [5]=0006 [6]=0024 [7]=0026
 [8]=0600 [9]=0602 [a]=0620 [b]=0622 [c]=0604 [d]=0606 [e]=0624 [f]=0626

RTW sintab:

makesintab:
    adr table90,sin
    add table90,table90,#1024*4
    add table270,table90,#2048*4
    mov s,#0
    mov c,#1<<19
    mov rounding,#1<<21
    mov sd,#&1900
    orr sd,sd,#&22
    mov index,#1024
loop:
    add temp,s,#1<<6
    mov temp,temp,lsr #7
    str temp,[table90,-index,lsl #2]
    str temp,[table90,index,lsl #2]
    rsb temp,temp,#0
    str temp,[table270,-index,lsl #2]
    str temp,[table270,index,lsl #2]
    mla temp,s,sd,rounding
    sub c,c,temp,lsr #22
    mla temp,c,sd,rounding
    add s,s,temp,lsr #22
    subs index,index,#1
    bpl loop
    movs pc,r14
sin:
